// <auto-generated />
using System;
using Justibot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace justibot_server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200816063111_roles")]
    partial class roles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Justibot.Entry", b =>
                {
                    b.Property<int>("EntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GiveawayId")
                        .HasColumnType("int");

                    b.Property<ulong>("entrentID")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("ishost")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("EntryID");

                    b.HasIndex("GiveawayId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Justibot.Giveaway", b =>
                {
                    b.Property<int>("GiveawayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("GActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("Gchannel")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("GservID")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("prize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("GiveawayId");

                    b.ToTable("Givaways");
                });

            modelBuilder.Entity("Justibot.LeavingMessage", b =>
                {
                    b.Property<int>("LeavingMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("leavingGuild")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("LeavingMessageID");

                    b.ToTable("leavingMessages");
                });

            modelBuilder.Entity("Justibot.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<ulong>("User")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("nServId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("NoteID");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("Justibot.ServPrefix", b =>
                {
                    b.Property<int>("ServPrefixID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                    b.Property<ulong>("prefixGuild")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("ServPrefixID");

                    b.ToTable("prefixes");
                });

            modelBuilder.Entity("Justibot.ServerPerm", b =>
                {
                    b.Property<int>("ServerPermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("PServId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("PermActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("PermArg")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Pmode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SPerm")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ServerPermID");

                    b.ToTable("ServerPerms");
                });

            modelBuilder.Entity("Justibot.TPlayer", b =>
                {
                    b.Property<int>("TPlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<bool>("isLeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("lost")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("playerID")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.Property<int>("teamNo")
                        .HasColumnType("int");

                    b.HasKey("TPlayerID");

                    b.HasIndex("TournamentId");

                    b.ToTable("TPlayers");
                });

            modelBuilder.Entity("Justibot.Tmatch", b =>
                {
                    b.Property<int>("TmatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Tmatchno")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("Troundno")
                        .HasColumnType("int");

                    b.Property<int>("Tteam1ID")
                        .HasColumnType("int");

                    b.Property<int>("Tteam2ID")
                        .HasColumnType("int");

                    b.HasKey("TmatchID");

                    b.HasIndex("TournamentId");

                    b.ToTable("TMatches");
                });

            modelBuilder.Entity("Justibot.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Tactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("Tchannel")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Thost")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tmax")
                        .HasColumnType("int");

                    b.Property<ulong>("TservID")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("joinable")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Justibot.WelcomeMessage", b =>
                {
                    b.Property<int>("WelcomeMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("welcomeGuild")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("WelcomeMessageID");

                    b.ToTable("welcomeMessages");
                });

            modelBuilder.Entity("Justibot.admin", b =>
                {
                    b.Property<int>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("staffMember")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("adminId");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("Justibot.blacklist", b =>
                {
                    b.Property<int>("blacklistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("bserver")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("blacklistID");

                    b.ToTable("blacklists");
                });

            modelBuilder.Entity("Justibot.globaluserxp", b =>
                {
                    b.Property<int>("globaluserxpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("User")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("globaluserxpID");

                    b.ToTable("globalusersxp");
                });

            modelBuilder.Entity("Justibot.music", b =>
                {
                    b.Property<int>("musicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("Tserver")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("musicId");

                    b.ToTable("musics");
                });

            modelBuilder.Entity("Justibot.reward", b =>
                {
                    b.Property<int>("rewardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("rewardlvl")
                        .HasColumnType("int");

                    b.Property<ulong>("rewardrole")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("rserver")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("rewardID");

                    b.ToTable("rewards");
                });

            modelBuilder.Entity("Justibot.roleMessage", b =>
                {
                    b.Property<int>("roleMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("guildId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("roleMessageId");

                    b.ToTable("roleMessages");
                });

            modelBuilder.Entity("Justibot.roleReaction", b =>
                {
                    b.Property<int>("roleReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("guildId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("reaction")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("roleId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("roleReactionId");

                    b.ToTable("roleReactions");
                });

            modelBuilder.Entity("Justibot.serveruserxp", b =>
                {
                    b.Property<int>("serveruserxpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("User")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.Property<int?>("serverxpID")
                        .HasColumnType("int");

                    b.HasKey("serveruserxpID");

                    b.HasIndex("serverxpID");

                    b.ToTable("serverusersxp");
                });

            modelBuilder.Entity("Justibot.serverxp", b =>
                {
                    b.Property<int>("serverxpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.Property<ulong>("xServId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("serverxpID");

                    b.ToTable("serversxp");
                });

            modelBuilder.Entity("Justibot.staffRole", b =>
                {
                    b.Property<int>("staffRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("PermArg")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("RServId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("staffRoleID");

                    b.ToTable("staffRoles");
                });

            modelBuilder.Entity("Justibot.versionControl", b =>
                {
                    b.Property<int>("versionControlID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("version")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("versionControlID");

                    b.ToTable("versionChecks");
                });

            modelBuilder.Entity("Justibot.Entry", b =>
                {
                    b.HasOne("Justibot.Giveaway", "Giveaway")
                        .WithMany("Entries")
                        .HasForeignKey("GiveawayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Justibot.TPlayer", b =>
                {
                    b.HasOne("Justibot.Tournament", "Tournament")
                        .WithMany("players")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Justibot.Tmatch", b =>
                {
                    b.HasOne("Justibot.Tournament", "Tournament")
                        .WithMany("matches")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("Justibot.serveruserxp", b =>
                {
                    b.HasOne("Justibot.serverxp", "Server")
                        .WithMany("usersXp")
                        .HasForeignKey("serverxpID");
                });
#pragma warning restore 612, 618
        }
    }
}
